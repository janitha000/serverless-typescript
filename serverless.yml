service: serverless-typescript
# params:
#   dev:
#     domain: serverlessapidev.janithatennakoon.com
#     cert: '*.janithatennakoon.com'
#   prod:
#     domain: serverlessapi.janithatennakoon.com
#     cert: '*.janithatennakoon.com'
frameworkVersion: '3'
plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-stack-output
  - serverless-step-functions
  - serverless-openapi-documentation
  - serverless-offline-lambda
  # - serverless-step-functions-local
  # - serverless-domain-manager
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-southeast-1
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    metrics: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
    NODE_PATH: "./:/opt/node_modules"
    MONGODB_URL: ${env:MONGODB_URL}
  stage: dev
  versionFunctions: true
  logs:
    format: '{ "requestId":"$context.requestId",   "ip": "$context.identity.sourceIp" }'
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
      - Effect: Allow
        Action:
          - "execute-api:ManageConnections"
        Resource:
          - "arn:aws:execute-api:*:*:**/@connections/*"
      - Effect: Allow
        Action: 
          - cloudformation:DescribeStacks
        Resource: 
          - arn:aws:cloudformation:${self:provider.region}:*
  websocketApiName: websocket-chat-${self:provider.stage}

  # required for websocket apis
  # this selects from your payload what your "routeKey" parameter is
  # from the websocket event types on your function
  websocketApiRouteSelectionExpression: $request.body.action


functions:
  - ${file(./src/functions/hello/hello.yml)}
  - ${file(./src/functions/user/user.yml)}
  - ${file(./src/functions/schedules/schedules.yml)}
  - ${file(./src/functions/express/express.yml)}
  - ${file(./src/functions/websocket/websocket.yml)}
  - ${file(./src/functions/auth/auth.yml)}
  - ${file(./src/functions/step/step.yml)}

stepFunctions:
  stateMachines:
    mapperStateMachine: ${file(./src/functions/step/state-machine.yml)}
      
    
package:
  individually: true
  artifactsS3KeyDirname: serverless/serverless-typescript/dev/code-artifacts
resources:
  Resources:

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      # - aws-sdk
      - lambda-logging
      - moment
    target: node14
    define: {}
    platform: node
    concurrency: 10
  documentation:
    version: '1'
    title: 'My API'
    description: 'This is my API'
    models: {}
  # domain:
  #   dev: serverlessapidev.janithatennakoon.com
  #   prod: serverlessapi.janithatennakoon.com
  # customDomain:
  #   domainName: ${self:custom.domain.${opt:stage, 'dev'}}
  #   basePath: "v1"
  #   stage: ${self:provider.stage}
  #   certificateName: "*.janithatennakoon.com"
  #   createRoute53Record: true
  stepFunctionsOffline:
    main: mainstep
    mapper: mapperstep
	
